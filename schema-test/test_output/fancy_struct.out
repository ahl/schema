DeriveInput {
    attrs: [],
    vis: Visibility::Inherited,
    ident: Ident(
        FancyStruct,
    ),
    generics: Generics {
        lt_token: Some(
            Lt,
        ),
        params: [
            GenericParam::Lifetime(
                LifetimeParam {
                    attrs: [],
                    lifetime: Lifetime {
                        apostrophe: Span,
                        ident: Ident(
                            a,
                        ),
                    },
                    colon_token: None,
                    bounds: [],
                },
            ),
            Comma,
            GenericParam::Type(
                TypeParam {
                    attrs: [],
                    ident: Ident(
                        T,
                    ),
                    colon_token: Some(
                        Colon,
                    ),
                    bounds: [
                        TypeParamBound::Trait(
                            TraitBound {
                                paren_token: None,
                                modifier: TraitBoundModifier::None,
                                lifetimes: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                ToString,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        ),
                    ],
                    eq_token: None,
                    default: None,
                },
            ),
            Comma,
            GenericParam::Type(
                TypeParam {
                    attrs: [],
                    ident: Ident(
                        U,
                    ),
                    colon_token: None,
                    bounds: [],
                    eq_token: None,
                    default: None,
                },
            ),
            Comma,
            GenericParam::Const(
                ConstParam {
                    attrs: [],
                    const_token: Const,
                    ident: Ident(
                        N,
                    ),
                    colon_token: Colon,
                    ty: Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        usize,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                    eq_token: None,
                    default: None,
                },
            ),
        ],
        gt_token: Some(
            Gt,
        ),
        where_clause: Some(
            WhereClause {
                where_token: Where,
                predicates: [
                    WherePredicate::Type(
                        PredicateType {
                            lifetimes: None,
                            bounded_ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                U,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                            colon_token: Colon,
                            bounds: [
                                TypeParamBound::Trait(
                                    TraitBound {
                                        paren_token: None,
                                        modifier: TraitBoundModifier::None,
                                        lifetimes: None,
                                        path: Path {
                                            leading_colon: None,
                                            segments: [
                                                PathSegment {
                                                    ident: Ident(
                                                        ToString,
                                                    ),
                                                    arguments: PathArguments::None,
                                                },
                                            ],
                                        },
                                    },
                                ),
                            ],
                        },
                    ),
                ],
            },
        ),
    },
    data: Data::Struct {
        struct_token: Struct,
        fields: Fields::Named {
            brace_token: Brace,
            named: [
                Field {
                    attrs: [
                        Attribute {
                            pound_token: Pound,
                            style: AttrStyle::Outer,
                            bracket_token: Bracket,
                            meta: Meta::NameValue {
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                doc,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                                eq_token: Eq,
                                value: Expr::Lit {
                                    attrs: [],
                                    lit: Lit::Str {
                                        token: " mind your tees and ewes",
                                    },
                                },
                            },
                        },
                    ],
                    vis: Visibility::Inherited,
                    mutability: FieldMutability::None,
                    ident: Some(
                        Ident(
                            tee,
                        ),
                    ),
                    colon_token: Some(
                        Colon,
                    ),
                    ty: Type::Reference {
                        and_token: And,
                        lifetime: Some(
                            Lifetime {
                                apostrophe: Span,
                                ident: Ident(
                                    a,
                                ),
                            },
                        ),
                        mutability: None,
                        elem: Type::Path {
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            T,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    },
                },
                Comma,
                Field {
                    attrs: [],
                    vis: Visibility::Inherited,
                    mutability: FieldMutability::None,
                    ident: Some(
                        Ident(
                            ewes,
                        ),
                    ),
                    colon_token: Some(
                        Colon,
                    ),
                    ty: Type::Array {
                        bracket_token: Bracket,
                        elem: Type::Path {
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            U,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                        semi_token: Semi,
                        len: Expr::Path {
                            attrs: [],
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            N,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                    },
                },
            ],
        },
        semi_token: None,
    },
}